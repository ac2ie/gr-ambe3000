This directory contains several flow-graphs to get you going. Some that transmit RF obviously require an SDR with an rf sink, i.e., a transmitter. These examples use a UHD. If you have a different device, you will need to change the example by removing the UHD and adding your rf device.

BEWARE, in general rf sinks and sources will not work with any sampling rate, so you may have to play with the examples a bit if gnuradio reports any trouble with setting clock rates. The error and warning messages do a good job of pointing you to the correct solution. You can insert a "Rational Resampler" to change the sample rate of any complex or float stream to make your hardware happy.

BEWARE, if you use a transmitting flow-graph, you should have an amateur radio license.

BEWARE, you can't have both the encoder and the decoder in a single flowgraph, so make a transmitter or a receiver, but not a transceiver.

The blocks:

Dstar Decode - This module takes a byte input stream of zeros and ones (one bit per byte) and produces audio data in short ints with a 8000Hz rate. If a header is detected in the incoming stream, it's contents will be displayed. This module will also report when it has seen three different sync patterns:
A) The header sync signifying that a 660 bit header follows.
B) The data sync will only be reported if the audio frame header was not preceded by a header.
C) The terminal sync showing that the audio stream is ending.
This block will also print data in the "slow data" portion of the voice frame. The header and the 20-character message will only be printed once per transmission.

DStar Encode - This module takes short int audio data sampled at 8000Hz and produces Dstar voice frame data. Currently no header is generated and no terminal sync is added at the end.

Bit Reverse - This module will reverse the bits in an byte input stream. This block is not used in any flow graph supplied here but might be necessary if want to use a different modulator that starts from the LSB side of the byte.

The examples:

1. audio2data.grc – This flow-graph uses the "DStar Encode" module to convert the output of an audio source and writes the dstar data (just 600 bytes for each second of audio) to a named file. Start the flow-graph and when it runs speak into the default audio input. When you are done, click the “x” in the run window to stop. The dstar stream written to the file sink contains no header, no “slow data” and no terminating flag.

2. data2audio.grc – This uses the "DStar Decode" module to convert a named file as a source of dstar data. Currently Any slow data will not be processed. But the header, if present, will be displayed. Select the file and then start the flow-graph to hear the recorded audio. The examples folder already contains an example datafile called "dstarstream".

3. data2rf.grc – This will read dstar data from a named file and send it to a UHD transmitting sink. Try the "dstarstream" data file in the examples directory.

4. audio2rf.grc – This will take audio from the default audio source and encode it using dstar_encode_sb and send it to a UHD sink. The delay block is present to ensure the input to the transmitter is satisfied while the block starts.

5. DStarReceiver.grc - This is a functioning Dstar Receiver. Set a "freq" frequency and start the flow-grap to listen on that frequency. Header data in the incoming signal will be decoded and displayed. "Slow data" in the audio stream is also displayed. The 20-character message and the DStar header is only displayed once.









Copyright 2016 Thomas A Early AC2IE

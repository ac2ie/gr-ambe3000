/*
 *   Copyright 2016 by Thomas Early AC2IE
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *   Adapted from gr-dsd by Clayton Smith <argilo@gmail.com>
 *   See https://github.com/argilo
 */

#include <cstring>
#include <cstdio>
#include <cctype>

#include "SlowData.h"

static const unsigned char scramble[] = { 0x0eu, 0xf2u, 0xc9u };

static const unsigned char bitreverse[] = {
	0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
	0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
	0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
	0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
	0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
	0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
	0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
	0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
	0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
	0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
	0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
	0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
	0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
	0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
	0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
	0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
	0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
	0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
	0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
	0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
	0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
	0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
	0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
	0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
	0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
	0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
	0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
	0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
	0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
};


CSlowData::CSlowData()
{
	Reset();
}

CSlowData::~CSlowData()
{
}

void CSlowData::Reset()
{
	m_headcount = 0;
	std::memset(m_header, 0, 41);
	std::memset(m_message, 0, 20);
	ClearType3();
}

void CSlowData::ClearType3()
{
	std::memset(m_type3, 0, 100);
}

void CSlowData::SetHeader(const char *h)
{
	memcpy(m_header, h, 41);
	PrintHeader();
	m_headcount = 9;
}

void CSlowData::Add3(const unsigned char *c, const int framecount)
{
	int fc = framecount % 21;
	if (0 == fc) return; // nothing to do on sync frames
	
	int i = fc % 2;
	std::memcpy(m_buffer + (i ? 0 : 3), c, 3);

	if (1 == i) return; // wait for the second set of data bytes (even frame #)

	for (int i=0; i<6; i++)
		m_buffer[i] = bitreverse[m_buffer[i] ^ scramble[i%3]] & 0x7fu; // clean up

	unsigned int key = m_buffer[0] / 0x10u;
	unsigned int count = m_buffer[0] % 0x10u;

	switch (key) {
		case 3:
			if (std::strlen(m_type3) > 94) break; 	// no room!
			std::memcpy(m_type3 + std::strlen(m_type3), m_buffer + 1, count);
			if (5 != count) {
				// trim trailing whitespace
				int last = std::strlen(m_type3) - 1;
				while (std::isspace(m_type3[last]))
					m_type3[last--] = (char)0;
				printf("%s\n", m_type3);
				ClearType3();
			}
			break;
		case 4:
			if (m_message[19])
				break;
			std::memcpy(m_message + 5 * count, m_buffer + 1, 5);
			if (3 == count) {
				for (int i=0; i<20; i++)
					if (' ' == m_message[i])
						m_message[i] = '_';
				std::printf("Message: %20.20s\n", m_message);
			}
			break;
		case 5:
			if (m_headcount >= 8) break;	// we aready have the header
			std::memcpy(m_header+(5*m_headcount++), m_buffer + 1, count);
			if (count<5 || m_headcount>=8)
				PrintHeader();
			break;
	}
	
	return;
}

void CSlowData::PrintHeader()
{
	for (int i=3; i<39; i++)
		if (' ' == m_header[i])
			m_header[i] = '_';
	std::printf("MY: %8.8s/%4.4s\n", m_header+27, m_header+35);
	std::printf("YOUR: %8.8s\n", m_header+19);
	std::printf("RPT1: %8.8s\n", m_header+11);
	std::printf("RPT2: %8.8s\n", m_header+3);
	return;
}
